
public class Address {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer addressId;

    @Pattern(regexp = "[A-Za-z0-9\\s-]{3,}", message = "Input a valid street number")
    private String streetNo;

    @Pattern(regexp = "[A-Za-z0-9\\s-]{3,}", message = "Not a valid Street name")
    private String streetName;

    @NotNull
    @Pattern(regexp = "[A-Za-z0-9\\s-]{3,}", message = "Not a valid locality name")
    private String locality;

    @NotNull(message = "City name cannot be null")
    @Pattern(regexp = "[A-Za-z\\s]{2,}", message = "Not a valid city name")
    private String city;

    @NotNull(message = "State name cannot be null")
    private String state;

    @NotNull(message = "Pincode cannot be null")
    @Pattern(regexp = "[0-9]{6}", message = "Pincode not valid. Must be 6 digits")
    private String pincode;

    @ManyToOne(cascade = CascadeType.ALL)
    @JsonIgnore
    private Customer customer;
}
public class Cart {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer cartId;

    @OneToMany(cascade = CascadeType.ALL)
    private List<CartItem> cartItems = new ArrayList<>();

    private Double cartTotal;

    @OneToOne(cascade = CascadeType.ALL)
    @JsonIgnore
    private Customer customer;

}

public class CartDTO {

    @NotNull
    private Integer productId;

    private String productName;

    private Double price;

    @Min(1)
    private Integer quantity;
}

public class CartItem {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer cartItemId;

    @OneToOne
    @JsonIgnoreProperties(value = {
            "productId",
            "seller",
            "quality"
    })
    private Product cartProduct;

    private Integer cartItemQuantity;
}
public class CreditCard {

    @NotNull
    @Pattern(regexp = "[0-9]{16,18}", message = "Invalid card number")
    private String cardNumber;

    @Pattern(regexp = "[0-9]{2}/[0-9]{2,4}", message = "Invalid validity. Enter in MM/YY or MM/YYYY format")
    private String cardValidity;

    @Pattern(regexp = "[0-9]{3}", message = "Invalid CVV. Must be numeric 3 digits length.")
    private String cardCVV;
}

public class Customer {

    @Id
    @GeneratedValue (strategy = GenerationType.AUTO)
    private Integer customerId;

    @NotNull(message = "First name cannot be blanked")
    @Pattern(regexp = "[A-Za-z.\\s]+", message = "Enter your first name")
    private String firstName;

    @NotNull(message = "Last name cannot be blanked")
    @Pattern(regexp = "[A-Za-z.\\s]+", message = "Enter your last name")
    private String lastName;

    @NotNull(message = "Enter Mobile Number")
    @Pattern(regexp = "[234]{3}[0-9]{10}", message = "Enter a valid mobile number")
    private String mobileNo;

    @NotNull(message = "Enter your email id")
    @Column(unique = true)
    @Email
    private String emailId;

    @NotNull(message = "Enter the password")
    @Pattern(regexp = "[A-Za-z0-9!@#$%^&*_]{8,15}", message = "Use 8 characters or more for your password")
    private String password;


    private LocalDateTime createdOn;

    @Embedded
    private CreditCard creditCard;

    @OneToMany
    @JoinTable(name = "customer_address_mapping",
            joinColumns = {
                     @JoinColumn(name = "customer_id", referencedColumnName = "customerId")
             },
            inverseJoinColumns = {
                     @JoinColumn(name = "address_id", referencedColumnName = "addressId")
            })
    private Map<String, Address> address = new HashMap<>();


    //Order Relationship
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "customer")
    private List<Order> orders = new ArrayList<>();

    //Customer - Cart Relationship
    @OneToOne(cascade = CascadeType.ALL)
    private Cart customerCart;
}
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer OrderId;

    @PastOrPresent
    private LocalDate date;

    @NotNull
    @Enumerated(EnumType.STRING)
    private OrderStatusValues orderStatus;


    private Double total;

    private String cardNumber;

    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "customer_id", referencedColumnName = "customerId")
    private Customer customer;

    @OneToMany
    private List<CartItem> orderCartItems = new ArrayList<>();

    @ManyToOne
    @JoinColumn(name = "address_id", referencedColumnName = "addressId")
    private Address address;
}
public enum  OrderStatusValues {
    SUCCESS,PENDING,CANCELLED
}
public class UserSession {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer sessionId;

    @Column(unique = true)
    private String token;

    @Column(unique = true)
    private Integer userId;

    private String userType;

    private LocalDateTime sessionStartTime;

    private LocalDateTime sessionEndTime;
}

@Service
public class CustomerServiceImpl implements CustomerService{
    @Autowired
    private CustomerDao customerDao;

    @Autowired
    private SessionDao sessionDao;

    @Autowired
    private LoginLogoutService loginService;

    //To add a new customer
    @Override
    public Customer addCustomer(Customer customer){

        customer.setCreatedOn(LocalDateTime.now());

        Cart c = new Cart();

        System.out.println(c);

        customer.setCustomerCart(c);

        customer.setOrders(new ArrayList<Order>());

        Optional<Customer> existing = customerDao.findByMobileNo(customer.getMobileNo());

        if (existing.isPresent())

            throw new CustomerException("Customer exists. Please login with mobile number");

        customerDao.save(customer);

        return customer;
    }

    //To get a customer mobile number

    @Override
    public Customer getLoggedInCustomerDetails(String token) {

        if (token.contains("customer") == false) {
            throw new LoginException("Invalid session token for customer");
        }

        loginService.checkTokenStatus(token);

        UserSession user = sessionDao.findByToken(token).get();

        Optional<Customer> opt = customerDao.findById(user.getUserId());

        if (opt.isEmpty())
            throw new CustomerNotFoundException("Customer doe not exist");

        Customer existingCustomer = opt.get();

        return existingCustomer;
    }
}

@Repository
public interface CustomerDao extends JpaRepository<Customer, Integer> {

    Optional<Customer> findByMobileNo(String mobileNumber);

    Optional<Customer> findByEmailId(String emailId);

    Optional<Customer> findByMobileNoOrEmailId(String mobileNo, String emailId);
}

